package templates

import (
	"github.com/demostanis/42evaluators/internal/models"
	"fmt"
	"strconv"
	"strings"
	"net/url"
)

func getIsActiveClass(isActive bool) string {
	var isActiveClass string
	if isActive {
		isActiveClass = "btn-active"
	}
	return isActiveClass
}

func urlWithPage(url *url.URL, page int) templ.SafeURL {
	params := (*url).Query()
	params.Del("page")
	if page != 1 {
		params.Add("page", strconv.Itoa(page))
	}
	newUrl := *url
	newUrl.RawQuery = params.Encode()
	return templ.SafeURL(newUrl.String())
}

templ pageButton(url *url.URL, page int, text string, isActive bool, isLock bool) {
	<a
		if !isLock {
			href={ urlWithPage(url, page) }
		}
	>
	<button
		if isLock {
			disabled
		}
		class={ "join-item", "btn", "btn-md", getIsActiveClass(isActive) }
	>{ text }</button></a>
}

func isDisabled(targetedPage int, totalPage int) bool {
	return targetedPage < 1 || targetedPage > totalPage
}

templ pagination(url *url.URL, page int, totalPages int) {
	<div class="join justify-center flex py-4">
		@pageButton(url, 1, "<<", false, page == 1)
		@pageButton(url,
			page - 1, "<", false,
			isDisabled(page-1, totalPages + 1))
		if page > 4 {
			@pageButton(url, 0, "...", false, true)
		}
		for i := max(1, page - 3); i <= min(page + 3, totalPages + 1); i++ {
			@pageButton(url, i, strconv.Itoa(i), i == page, false)
		}
		if page < totalPages - 3 {
			@pageButton(url, 0, "...", false, true)
		}
		@pageButton(url,
			 page + 1, ">", false,
			 isDisabled(page+1, totalPages + 1))
		@pageButton(url, totalPages + 1, ">>", false, page == totalPages + 1)
	</div>
}

func getProfileUrl(user models.User) templ.SafeURL {
	return templ.SafeURL("https://profile.intra.42.fr/users/" + user.Login)
}

func getBgUrl(user models.User) string {
	return "bg-[url(" + user.Coalition.CoverUrl + ")] bg-cover bg-center"
}

func urlWithSorting(url *url.URL, sort string) templ.SafeURL {
	params := (*url).Query()
	params.Del("sort")
	if sort != "level" { // since that's the default
		params.Add("sort", sort)
	}
	newUrl := *url
	newUrl.RawQuery = params.Encode()
	return templ.SafeURL(newUrl.String())
}

script fallbackImages(src string) {
	[].__proto__.slice.call(document.querySelectorAll("img")).forEach(img =>
		(img.onerror = () => img.src = src));
}

templ Leaderboard(users []models.User, url *url.URL, page int, totalPages int64, offset int) {
	@header()

	<div id="main">
		@pagination(url, page, int(totalPages))
		<table class="table">
			<thead class="sticky top-0 bg-gray-700 z-10">
				<tr class="text-2xl">
					<th>Position</th>
					<th>Profile picture</th>
					<th><a href={ urlWithSorting(url, "login") }>
						User
					</a></th>
					<th><a href={ urlWithSorting(url, "level") }>
						Level
					</a></th>
					<th><a href={ urlWithSorting(url, "correction_points") }>
						Correction points
					</a></th>
					<th><a href={ urlWithSorting(url, "campus_id") }>
						Campus
					</a></th>
				</tr>
			</thead>
			<tbody>
				for i, user := range users {
					<tr class={ "text-white", "text-xl", getBgUrl(user) }>
						<td>{ strconv.Itoa(i + offset + 1) }.</td>
						<td class="flex">
							<div class="avatar placeholder w-24 h-24 object-contain">
								<img class="rounded-full" src={ user.ImageLink } />
							</div>
						</td>
						<td>
							<a href={ getProfileUrl(user) }>
								{ strings.Replace(user.Title.Name, "%login", user.Login, -1) }
							</a>
						</td>
						<td>{ fmt.Sprintf("%.2f", user.Level) }</td>
						<td>{ fmt.Sprintf("%d", user.CorrectionPoints) }</td>
						<td>{ user.Campus.Name }</td>
					</tr>
				}
			</tbody>
		</table>
		@pagination(url, page, int(totalPages))
	</div>
	@fallbackImages(models.DefaultImageLink)
}
